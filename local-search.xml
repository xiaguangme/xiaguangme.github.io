<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>几个递进的make file</title>
    <link href="/2020/04/19/some-make-files/"/>
    <url>/2020/04/19/some-make-files/</url>
    
    <content type="html"><![CDATA[<h2 id="几个递进的make-file"><a href="#几个递进的make-file" class="headerlink" title="几个递进的make file"></a>几个递进的make file</h2><p>春节在家写的几个递进的make file，部分有点问题。接下来 有空我要把GNU make的手册看完。不然这方面太菜了。  </p><p><a href="https://files.cnblogs.com/files/simoncook/gun-make-manual%E4%B8%AD%E8%8B%B1%E6%96%87.zip" target="_blank" rel="noopener">GNU make手册</a><br>都需要make先设置环境变量BUILD_MODE为run或者debug</p><h3 id="1-源文件名-目标都hard-code，且一次编译多个目标"><a href="#1-源文件名-目标都hard-code，且一次编译多个目标" class="headerlink" title="1 源文件名 目标都hard code，且一次编译多个目标"></a>1 源文件名 目标都hard code，且一次编译多个目标</h3><pre><code class="hljs shell">PROJECT_ROOT = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))OBJS = lsdemo.o test.oifeq ($(BUILD_MODE),debug)CFLAGS += -gelse ifeq ($(BUILD_MODE),run)CFLAGS += -O2else<span class="hljs-meta">$</span><span class="bash">(error Build mode $(BUILD_MODE) not supported by this Makefile)</span>endifall:lsdemo testlsdemo:lsdemo.o<span class="hljs-meta">$</span><span class="bash">(CXX) -o <span class="hljs-variable">$@</span> $^</span>lsdemo.o:$(PROJECT_ROOT)/ch01/lsdemo.c<span class="hljs-meta">$</span><span class="bash">(CC) -c $(CFLAGS) $(CPPFLAGS) -o <span class="hljs-variable">$@</span> $&lt;</span>test:test.o<span class="hljs-meta">$</span><span class="bash">(CXX) -o <span class="hljs-variable">$@</span> $^</span>test.o:$(PROJECT_ROOT)/ch01/test.c<span class="hljs-meta">$</span><span class="bash">(CC) -c $(CFLAGS) $(CPPFLAGS) -o <span class="hljs-variable">$@</span> $&lt;</span>clean:rm -fr lsdemo test  $(OBJS)</code></pre><h3 id="2-通过OBJS变量定义多个目标文件-通过遍历ch01-目录下所有c文件作为源文件"><a href="#2-通过OBJS变量定义多个目标文件-通过遍历ch01-目录下所有c文件作为源文件" class="headerlink" title="2 通过OBJS变量定义多个目标文件 通过遍历ch01/目录下所有c文件作为源文件"></a>2 通过OBJS变量定义多个目标文件 通过遍历ch01/目录下所有c文件作为源文件</h3><pre><code class="hljs shell">PROJECT_ROOT = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))OBJS = lsdemo.o test.oifeq ($(BUILD_MODE),debug)CFLAGS += -gelse ifeq ($(BUILD_MODE),run)CFLAGS += -O2else<span class="hljs-meta">$</span><span class="bash">(error Build mode $(BUILD_MODE) not supported by this Makefile)</span>endifall:lsdemo lsdemo:$(OBJS)<span class="hljs-meta">$</span><span class="bash">(CXX) -o <span class="hljs-variable">$@</span> $^</span><span class="hljs-meta">%</span><span class="bash">.o:$(PROJECT_ROOT)/ch01/%.c</span><span class="hljs-meta">$</span><span class="bash">(CC) -c $(CFLAGS) $(CPPFLAGS) -o <span class="hljs-variable">$@</span> $&lt;</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">test</span>:test.o</span><span class="hljs-meta">#</span><span class="bash">$(CXX) -o <span class="hljs-variable">$@</span> $^</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash">test.o:$(PROJECT_ROOT)/ch01/test.c</span><span class="hljs-meta">#</span><span class="bash">$(CC) -c $(CFLAGS) $(CPPFLAGS) -o <span class="hljs-variable">$@</span> $&lt;</span><span class="hljs-meta">#</span><span class="bash"></span>clean:rm -fr lsdemo test  $(OBJS)</code></pre><h3 id="3-ch01-ch02-多个子目录下多目标编译"><a href="#3-ch01-ch02-多个子目录下多目标编译" class="headerlink" title="3 ch01 ch02 多个子目录下多目标编译"></a>3 ch01 ch02 多个子目录下多目标编译</h3><pre><code class="hljs shell">PROJECT_ROOT = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))CH01OBJS = lsdemo.o test.oCH02OBJS = test21.o test22.oifeq ($(BUILD_MODE),debug)CFLAGS += -gelse ifeq ($(BUILD_MODE),run)CFLAGS += -O2else<span class="hljs-meta">$</span><span class="bash">(error Build mode $(BUILD_MODE) not supported by this Makefile)</span>endifall:lsdemo ch02lsdemo:$(CH01OBJS)<span class="hljs-meta">$</span><span class="bash">(CXX) -o <span class="hljs-variable">$@</span> $^</span><span class="hljs-meta">%</span><span class="bash">.o:$(PROJECT_ROOT)/ch01/%.c</span><span class="hljs-meta">$</span><span class="bash">(CC) -c $(CFLAGS) $(CPPFLAGS) -o <span class="hljs-variable">$@</span> $&lt;</span>ch02:$(CH02OBJS)<span class="hljs-meta">$</span><span class="bash">(CXX) -o <span class="hljs-variable">$@</span> $^</span><span class="hljs-meta">%</span><span class="bash">.o:$(PROJECT_ROOT)/ch02/%.c</span><span class="hljs-meta">$</span><span class="bash">(CC) -c $(CFLAGS) $(CPPFLAGS) -o <span class="hljs-variable">$@</span> $&lt;</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">test</span>:test.o</span><span class="hljs-meta">#</span><span class="bash">$(CXX) -o <span class="hljs-variable">$@</span> $^</span><span class="hljs-meta">#</span><span class="hljs-meta">#</span><span class="bash">test.o:$(PROJECT_ROOT)/ch01/test.c</span><span class="hljs-meta">#</span><span class="bash">$(CC) -c $(CFLAGS) $(CPPFLAGS) -o <span class="hljs-variable">$@</span> $&lt;</span><span class="hljs-meta">#</span><span class="bash"></span>clean:rm -fr lsdemo test  $(OBJS)</code></pre><h3 id="4-通过修改CH-NO和APP-NAME切换到底编译哪个子目录下的应用，编译到指定路径下，适用于APUE学习时例程序编写"><a href="#4-通过修改CH-NO和APP-NAME切换到底编译哪个子目录下的应用，编译到指定路径下，适用于APUE学习时例程序编写" class="headerlink" title="4 通过修改CH_NO和APP_NAME切换到底编译哪个子目录下的应用，编译到指定路径下，适用于APUE学习时例程序编写"></a>4 通过修改CH_NO和APP_NAME切换到底编译哪个子目录下的应用，编译到指定路径下，适用于APUE学习时例程序编写</h3><pre><code class="hljs shell">CH_NO = ch01APP_NAME = lsdemo<span class="hljs-meta">#</span><span class="bash"> 获取makefile路径</span>PROJECT_ROOT = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))<span class="hljs-meta">$</span><span class="bash">(info MAKEFILE_LIST is: $(MAKEFILE_LIST))</span><span class="hljs-meta">$</span><span class="bash">(info PROJECT_ROOT is: $(PROJECT_ROOT))</span><span class="hljs-meta">#</span><span class="bash"> 拼接路径</span>SOURCE_FRAGMENT :=$(CH_NO)/$(APP_NAME)SOURCE_ROOT := $(PROJECT_ROOT)$(SOURCE_FRAGMENT)<span class="hljs-meta">$</span><span class="bash">(info SOURCE_ROOT is: $(SOURCE_ROOT))</span>BUILD_ROOT := $(PROJECT_ROOT)build/make.debug.linux.x86_64/$(SOURCE_FRAGMENT)/<span class="hljs-meta">$</span><span class="bash">(info BUILD_ROOT is: $(BUILD_ROOT))</span>ifeq ($(BUILD_MODE),debug)CFLAGS += -gelse ifeq ($(BUILD_MODE),run)CFLAGS += -O2else<span class="hljs-meta">$</span><span class="bash">(error Build mode $(BUILD_MODE) not supported by this Makefile)</span>endif<span class="hljs-meta">$</span><span class="bash">(shell <span class="hljs-keyword">if</span> [ ! -d $(BUILD_ROOT) ]; <span class="hljs-keyword">then</span> mkdir -p $(BUILD_ROOT); <span class="hljs-keyword">fi</span>;)</span>SOURCE := $(shell find $(SOURCE_ROOT) -name '*.c' |xargs -n1 basename)OBJS := $(SOURCE:.c=.o)<span class="hljs-meta">$</span><span class="bash">(info SOURCE is: $(SOURCE))</span><span class="hljs-meta">$</span><span class="bash">(info OBJS is: $(OBJS))</span>all: $(APP_NAME)<span class="hljs-meta">#</span><span class="hljs-meta">$</span><span class="bash">(APP_NAME):$(OBJS)</span><span class="hljs-meta">$</span><span class="bash">(CXX) -o $(BUILD_ROOT)/<span class="hljs-variable">$@</span> $(addprefix $(BUILD_ROOT), $^)</span><span class="hljs-meta">%</span><span class="bash">.o:$(SOURCE_ROOT)/%.c</span><span class="hljs-meta">$</span><span class="bash">(CC) -c $(CFLAGS) $(CPPFLAGS) -o $(BUILD_ROOT)/<span class="hljs-variable">$@</span> $&lt;</span>clean:rm -fr $(BUILD_ROOT)</code></pre><p>附上第四种情况的目录结构：</p><pre><code class="hljs shell">appweb@simon-ububtu18-desk-2:~/600.self/03.code/01.cpp/03.APUE$ tree .├── build│   └── make.debug.linux.x86_64│       └── ch01│           └── lsdemo│               ├── lsdemo│               ├── lsdemo.o│               └── test.o├── ch01│   └── lsdemo│       ├── lsdemo.c│       └── test.c└── Makefile</code></pre>]]></content>
    
    
    <categories>
      
      <category>program-language-practice</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的价值观</title>
    <link href="/2020/04/19/MySenseOfWorth/"/>
    <url>/2020/04/19/MySenseOfWorth/</url>
    
    <content type="html"><![CDATA[<h2 id="我的价值观"><a href="#我的价值观" class="headerlink" title="我的价值观"></a>我的价值观</h2><ol><li>一个底线：遵纪守法，远离黄赌毒。</li><li>一个标准：感恩上进，持续努力，享受尽职。</li><li>一个方法论：三人行必有我师，三人行我亦能成师。</li><li>一个技巧：顺势而为。</li><li>一个兜底：凡事有最坏的打算。</li></ol>]]></content>
    
    
    <categories>
      
      <category>think</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
